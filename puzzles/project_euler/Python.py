#!/usr/bin/python
import math

def primality_test(n):
    n = int(n)
    if n == 2 or n == 3: return True
    if n < 2 or n % 2 == 0: return False
    if n < 9: return True
    if n % 3 == 0: return False
    r = int(math.sqrt(n))
    f = 5
    while f <= r:
        if n % f == 0: return False
        if n % (f + 2) == 0: return False
        f +=6
    return True

def pythag_trip(a, b, c):
	return a**2 + b**2 == c**2

class Problems:

	"""

	---- Beginning of Project Euler solutions ---

	"""

	def prob1(self):
		""" 
		Problem 1:

		If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
		The sum of these multiples is 23.

		Find the sum of all the multiples of 3 or 5 below 1000.

		"""
		multiples = [x for x in range(1,1000) if x % 3 == 0 or x % 5 == 0]
		return sum(multiples)

	def prob2(self):
		"""
		Problem 2:

		Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

		By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
		the sum of the even-valued terms.
		"""
		answer = 0
		a, b = 0, 1
		endpoint = 4000000

		while b < endpoint:
			a, b = b, a + b
			if b % 2 == 0:
				answer = answer + b 
		return answer

	def prob3(self):
		"""
		Problem 3:

		The prime factors of 13195 are 5, 7, 13 and 29.

		What is the largest prime factor of the number 600851475143?
		"""
		end = 600851475143
		start = 2

		while (start**2 <= end):
			if (end % start == 0):
				end /= start
			else:
				start += 2 if start > 2 else 1

		return start

	def prob4(self):
		"""
		Problem 4:

		A palindromic number reads the same both ways. The largest palindrome made from the product
		of two 2-digit numbers is 9009 = 91 * 99.

		Find the largest palindrome made from the product of two 3-digit numbers.
		"""
		palindromes = []

		for i in range(100, 999, 1):
			for j in range(999, 100, -1):
				if str(i*j)[::-1] == str(i*j):
					palindromes.append(i*j)

		return max(palindromes)

	def prob5(self):
		"""
		Problem 5:

		2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any 
		remainder.

		What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
		"""
		smaller_list = [11, 13, 14, 16, 17, 18, 19, 20]

		for numbers in range(2520, 999999999, 2520):
			if all(numbers % n == 0 for n in smaller_list):
				return numbers
		return None

	def prob6(self):
		"""
		Problem 6:

		The sum of the squares of the first ten natural numbers is,

		1^2 + 2^2 + ... + 10^2 = 385

		The square of the sum of the first ten natural numbers is,

		(1 + 2 + ... + 10)^2 = 55^2 = 3025

		Hence the difference between the sum of the squares of the first ten natural numbers
		and the square of the sum is 3025 - 385 = 2640.

		Find the difference between the sum of the squares of the first hundred natural numbers and
		the square of the sum.

		"""

		# Sum of the squares between 1 and 100
		sum_of_squares = sum([x**2 for x in range(1, 101)])

		# Square of the sum
		square_of_sum = sum([x for x in range(1, 101)])**2

		# Difference between two
		difference = square_of_sum - sum_of_squares

		return difference

	def prob7(self):
		"""
		Problem 7:

		By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

		What is the 10,001st prime number?
		"""
		end = 10001
		start = 2
		count = 1
		primes = []

		while count <= end:
			if primality_test(start) == True:
				primes.append(start)
				count += 1
			start += 1

		return max(primes)

	def prob8(self):
		try:
			from functools import reduce
		except ImportError:
			pass

		"""
		The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.

		Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value
		of this product?

		"""

		thousand_digit = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

		products = []

		for numbers in range(0, len(thousand_digit)-13):
			sequence = [int(x) for x in thousand_digit[numbers:numbers+13]]
			products.append(reduce(lambda x, y: x*y, sequence))

		return max(products)

	def prob9(self):
		"""
		Problem 9:

		A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

		a^2 + b^2 = c^2

		For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2

		There exists exactly one Pythagorean triplet for which a + b + c = 1000
		Find the product abc.
		"""
		from math import sqrt

		for m in range(int(sqrt(1000/2)), int(sqrt(1000)/2), -1):
			n = 1000 / (2.0*m) - m
			if n > 0 and n % 1 == 0:
				a = m*m - n*n
				b = 2*m*n
				c = m*m + n*n
				return map(int, (a, b, c, a*b*c))

	def prob10(self):
		"""
		Problem 10:

		The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

		Find the sum of all the primes below two million.
		"""

		return sum([x for x in range(1, 2000000) if primality_test(x) == True])

	def prob11(self):
		pass
		# WORK IN PROGRESS!


PE = Problems()

def select_problem(n):

	return eval("PE.prob" + str(n) + "()") 

if __name__ == '__main__':
	# choice = int(input("Hello, and welcome to my Project Euler script.\nPlease enter the number of the PE question you want the answer to: "))
	# print("Problem " + str(choice) + " Solution: "),
	# print(select_problem(choice))
	print(PE.prob11())